主题：	1.驱动的子系统
	2.input子系统的概述
	3.input子系统的核心结构体
	4.FT5206电容屏的input驱动(IIC)



1.驱动的子系统
=======================
几种最常见的char驱动子系统：
(1)ALSA
音频子系统，Advanced Linux Sound Architecture
(2)V4L2
视频子系统，Video for Linux 2
(3)FB
显示子系统，Frame Buffer
(4)TTY
终端子系统，目前来说，主要是UART和tty子系统配合
(5)INPUT
输入子系统，针对鼠标，键盘，按键，触摸屏等

如果将驱动和子系统结合，那么驱动将不会直接和用户态的设备文件建立联系，由对应的子系统创建/dev/下的设备文件
tty子系统： /dev/tty*
alsa子系统：/dev/snd/*
input子系统：/dev/input/*
fb子系统：/dev/fb*
v4l2子系统：/dev/video*



学习的困难：
(1)资料太少，基本没有太多参考书涉及子系统部分；
(2)由于硬件的不断发展，同样的子系统在不同内核中会有一些变化，写驱动时必须了解当前运行内核的子系统要求；
(3)每种子系统是针对同一类型设备，因此，写音频驱动就需要了解alsa子系统，写视频驱动就需要了解v4l2子系统。。。

带来的好处：
(1)降低了驱动的设计难度
子系统通常实现了很多设备特定领域的内容，有了子系统，驱动就可以专心于设备的寄存器设置。

(2)让用户态接口尽量稳定
由于用户态访问设备文件时，首先要调用子系统的代码。因此，子系统尽量保持代码对用户态稳定(尤其是ioctl命令稳定)。如果硬件或内核有变化，基本上不用修改用户态的应用程序。

(3)提高代码的复用率



2.input子系统
=========================
针对触摸屏，鼠标，键盘，按键等设备。
如果想和用户态的qt等能够接收鼠标、键盘等设备输入的应用程序结合，那么就要在内核中提供input驱动。

(1)input子系统在用户态的特征
创建的设备文件在/dev/input目录下，名字为eventx等;
在/sys/class/input目录下，是系统中所有的input设备(input子系统负责创建class结构体);
input子系统还在/proc/bus/input目录下创建了文件devices和handlers，其中devices列出了系统中的所有input设备


(2)input子系统的内核相关代码
input子系统的实现代码在drivers/input目录;
相关的头文件是<linux/input.h>;
周末可以看看input子系统的实现代码，包括input.c以及evdev.c(定义file_operations)

input子系统负责生成/dev/下的设备文件，参考/dev/input目录，其中有多个设备文件，每个文件和实际的input硬件对应。

要了解每个设备文件对应哪些硬件，可以参考/proc/bus/input/devices文件



3.input子系统的核心结构体
=========================
(1)input_event
定义在<linux/input.h>
由驱动生成，每个input_event对应设备的一次行为。
比如按键的一次抬起或按下，或者是触摸屏/鼠标等产生的一次坐标；
驱动准备好input_event后，要提交给input子系统。input子系统会为每个设备构建一个缓冲区来存储input_event，当用户态有人读/dev/input/eventx文件时，读到的就是一个个的input_event

每个input_event中含有type,code,value三个信息，合在一起表示按键或坐标信息


(2)input_dev
定义在<linux/input.h>
该结构体由input子系统设计，要求驱动来分配并初始化。每当驱动要支持一个实际存在的设备时，就需要分配并初始化一个input_dev，然后注册到input子系统中。
只有注册过input_dev，input子系统才会在/dev/input下创建对应的设备文件。

input_dev是子系统要求为每个实际存在设备创建的结构体，和以前学过的xx_priv结构体不冲突。实际中，驱动经常同时为每个设备分配input_dev和xx_priv结构，但只需要向子系统注册input_dev即可。

几乎所有的子系统都和input子系统的设计思路类似，子系统要求驱动为每个支持的设备提供一个结构体。input子系统为input_dev；网络子系统为net_device；fb子系统为fb_info；块子系统为gendisk



4. FT5206电容屏控制器驱动
==========================
电容屏的电路图见datasheet/lcd/目录下的s701图
根据电路图，电容屏的控制芯片为FT5206，该芯片内部包括一个8051，以及厂商提供的程序。
实质上，4412和FT5206间是通讯的关系，当手指按到电容屏上的时候，FT5206的程序自动探测手指的位置，并进行计算，然后将计算结果存入内部的寄存器。

手指的坐标确定以后，FT5206会通过外部中断(EINT14)来通知4412.4412收到中断后，应该在中断处理函数中，通过I2C控制器2，来访问FT5206，并从寄存器中读出坐标信息。

EINT14为中断，对应4412的引脚GPX1_6，可以用EXYNOS4_GPX1(6)宏来获得引脚的GPIO号；
再用gpio_to_irq()获取对应的中断号；

注意！根据电路图，FT5206应该和4412内部的I2C2控制器相连，但实际上，应该连接I2C1控制器。


...


